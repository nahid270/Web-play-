# =====================================================================================
# ||      GODFATHER MOVIE BOT (v3.0 - Final & Reliable Regex Search Version)         ||
# ||---------------------------------------------------------------------------------||
# ||     Atlas Search ‡¶õ‡¶æ‡ßú‡¶æ Regex ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö‡•§ ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ DB ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á‡•§     ||
# =====================================================================================

import os
import re
import base64
import logging
import asyncio
from dotenv import load_dotenv
from threading import Thread
from flask import Flask
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.enums import ChatType
from motor.motor_asyncio import AsyncIOMotorClient
from bson.objectid import ObjectId

# --- ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶ì ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
load_dotenv()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGGER = logging.getLogger(__name__)

# --- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶® ---
# ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶Ø‡ßá‡¶Æ‡¶®: -1001234567890
FILE_CHANNEL_ID = -1002744890741 # <====== ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶∏‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶®

if FILE_CHANNEL_ID == -1001234567890:
    LOGGER.warning("CRITICAL: Please update the FILE_CHANNEL_ID in the code with your actual channel ID.")

try:
    API_ID = int(os.environ.get("API_ID"))
    API_HASH = os.environ.get("API_HASH")
    BOT_TOKEN = os.environ.get("BOT_TOKEN")
    MONGO_URL = os.environ.get("MONGO_URL")
    AD_PAGE_URL = os.environ.get("AD_PAGE_URL")
    ADMIN_IDS = [int(id.strip()) for id in os.environ.get("ADMIN_IDS", "").split(',') if id.strip()]
    PORT = int(os.environ.get("PORT", 8080))
    DELETE_DELAY = 15 * 60
except (ValueError, TypeError) as e:
    LOGGER.critical(f"Configuration error in environment variables: {e}")
    exit()

# --- ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü, ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶ì ‡¶ì‡ßü‡ßá‡¶¨ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ---
app = Client("MovieBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
mongo_client = AsyncIOMotorClient(MONGO_URL)
db = mongo_client["MovieDB"]
movie_info_db = db["movie_info"]
files_db = db["files"]
users_db = db["users"]

web_app = Flask(__name__)
@web_app.route('/')
def health_check(): return "Bot is alive and running!"


# ========= üìÑ ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ========= #
def is_admin(_, __, message):
    return message.from_user and message.from_user.id in ADMIN_IDS
admin_filter = filters.create(is_admin)

async def delete_messages_after_delay(messages, delay):
    await asyncio.sleep(delay)
    for msg in messages:
        try: await msg.delete()
        except Exception: pass


# ========= üì¢ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶∏‡ßá‡¶≠ ========= #
@app.on_message(filters.channel & (filters.video | filters.document))
async def save_movie_quality(client, message):
    if message.chat.id != FILE_CHANNEL_ID: return
    
    caption = message.caption or ""
    # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá Regex ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡ßá‡¶® ‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ü ‡¶õ‡¶æ‡ßú‡¶æ‡¶ì ‡¶∏‡¶æ‡¶≤ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡ßü
    # ‡¶è‡¶á ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶®‡¶ü‡¶ø `Movie Name (YYYY)` ‡¶¨‡¶æ `Movie Name YYYY` ‡¶â‡¶≠‡¶Ø‡¶º‡¶ï‡ßá‡¶á ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡•§
    title_match = re.search(r"(.+?)\s*\(?(\d{4})\)?", caption, re.IGNORECASE)
    
    if not title_match:
        LOGGER.warning(f"Could not parse Title and Year from msg {message.id}. Caption: '{caption}'")
        return
        
    # ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    raw_title = title_match.group(1).strip()
    year = title_match.group(2)
    # ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá ‡¶•‡¶æ‡¶ï‡¶æ ‡¶∏‡¶ø‡¶ú‡¶® ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ
    clean_title = re.sub(r'\s*S\d+.*', '', raw_title, flags=re.IGNORECASE).strip()
    # ‡¶°‡¶ü ‡¶¨‡¶æ ‡¶Ü‡¶®‡ßç‡¶°‡¶æ‡¶∞‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡¶ï‡ßá ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡¶æ
    clean_title = re.sub(r'[\.\_]', ' ', clean_title).strip() # .strip() ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶§‡ßá

    quality = next((q for q in ["480p", "720p", "1080p", "2160p", "4k"] if q in caption.lower()), "Unknown")
    language = next((lang for lang in ["hindi", "bangla", "english", "tamil", "telugu", "malayalam", "kannada"] if lang.lower() in caption.lower()), "Unknown")
    
    movie_doc = await movie_info_db.find_one_and_update(
        {"title_lower": clean_title.lower(), "year": year},
        {"$setOnInsert": {"title": clean_title, "year": year, "title_lower": clean_title.lower()}}, # ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã title_lower ‡¶∏‡ßá‡¶ü ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        upsert=True, return_document=True
    )
    
    await files_db.update_one(
        {"movie_id": movie_doc['_id'], "quality": quality, "language": language},
        {"$set": {"file_id": message.video.file_id if message.video else message.document.file_id, "chat_id": message.chat.id, "msg_id": message.id}},
        upsert=True
    )
    LOGGER.info(f"‚úÖ Indexed: {clean_title} ({year}) [{quality} - {language}]")


# ========= üíª ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ì ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ========= #
@app.on_message(filters.command("stats") & admin_filter)
async def stats_command(client, message):
    total_users = await users_db.count_documents({})
    total_movies = await movie_info_db.count_documents({})
    total_files = await files_db.count_documents({})
    await message.reply_text( f"üìä **Bot Stats**\n\nüë• Users: `{total_users}`\nüé¨ Movies: `{total_movies}`\nüìÅ Files: `{total_files}`\n\nüì¢ **Indexing Channel:** `{FILE_CHANNEL_ID}` (Hardcoded)" )

@app.on_message(filters.private & filters.command("start"))
async def start_handler(client, message):
    user_id = message.from_user.id
    if not await users_db.find_one({"_id": user_id}):
        await users_db.insert_one({"_id": user_id, "name": message.from_user.first_name})
    if len(message.command) > 1:
        try:
            payload = message.command[1]
            decoded_data = base64.urlsafe_b64decode(payload).decode()
            parts = decoded_data.split('_')
            if len(parts) != 3: raise ValueError("Invalid payload")
            action, data_id, verified_user_id_str = parts
            if user_id != int(verified_user_id_str): return await message.reply_text("üò° Verification Failed!")
            if action == "file":
                file_doc = await files_db.find_one({"_id": ObjectId(data_id)})
                if file_doc:
                    movie_doc = await movie_info_db.find_one({"_id": file_doc['movie_id']})
                    final_caption = (f"üé¨ **{movie_doc['title']} ({movie_doc['year']})**\n‚ú® **Quality:** {file_doc['quality']}\nüåê **Language:** {file_doc['language']}\n\nüôè Thank you!")
                    movie_msg = await client.copy_message(chat_id=user_id, from_chat_id=file_doc['chat_id'], message_id=file_doc['msg_id'], caption=final_caption)
                    warning_msg = await message.reply_text(f"‚ùó File auto-deletes in **{DELETE_DELAY // 60} mins**.", quote=True)
                    asyncio.create_task(delete_messages_after_delay([movie_msg, warning_msg], DELETE_DELAY))
        except Exception as e: LOGGER.error(f"Deep link error: {e}"); await message.reply_text("ü§î Invalid/expired link.")
    else: await message.reply_text(f"üëã Hello, **{message.from_user.first_name}**!\nSend me a movie name to search.")

# ========= üîÑ ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ========= #
@app.on_callback_query()
async def callback_handler(client, callback_query):
    data, user_id = callback_query.data, callback_query.from_user.id
    if data.startswith("showqual_"):
        movie_id = ObjectId(data.split("_", 1)[1])
        await show_quality_options(callback_query.message, movie_id, is_edit=True)
    elif data.startswith("getfile_"):
        file_id_str = data.split("_", 1)[1]
        encoded_data = base64.urlsafe_b64encode(f'file_{file_id_str}_{user_id}'.encode()).decode()
        verification_url = f"{AD_PAGE_URL}?data={encoded_data}"
        await callback_query.message.edit_reply_markup(InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®", url=verification_url)]]))
    await callback_query.answer()

async def show_quality_options(message, movie_id, is_edit=False):
    files_cursor = files_db.find({"movie_id": movie_id})
    files = await files_cursor.to_list(length=None)
    if not files: await message.reply_text("Sorry, no files found for this movie."); return
    movie = await movie_info_db.find_one({"_id": movie_id})
    if not movie: await message.reply_text("Sorry, could not find movie details."); return
    buttons = [[InlineKeyboardButton(f"‚ú® {f['quality']} | üåê {f['language']}", callback_data=f"getfile_{f['_id']}")] for f in sorted(files, key=lambda x: x.get('quality', ''))]
    text = f"üé¨ **{movie['title']} ({movie['year']})**\n\nüëá Select quality:"
    try:
        if is_edit: await message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons))
        else: await message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons), quote=True)
    except Exception as e: LOGGER.error(f"Show quality options error: {e}")


# ========= üîé ‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø Regex ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ========= #
@app.on_message((filters.private | filters.group) & filters.text)
async def reliable_search_handler(client, message):
    if message.text.startswith("/") or message.from_user.is_bot:
        return

    query = message.text.strip()
    LOGGER.info(f"Received search query: '{query}' from user {message.from_user.id}")

    # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶∂‡¶¨‡ßç‡¶¶‡¶ó‡ßÅ‡¶≤‡ßã ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    # ‡¶Ø‡ßá‡¶Æ‡¶®: "watch sarzameen movie online free" ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá "sarzameen movie"
    # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶ì ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶ï‡¶æ‡¶∞‡¶£ Regex ‡¶è ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á
    cleaned_query_parts = re.findall(r'\b[a-z\d]+\b', query.lower())
    if not cleaned_query_parts:
        LOGGER.info(f"Cleaned query is empty for '{query}'. Skipping search.")
        if message.chat.type == ChatType.PRIVATE:
            await message.reply_text(f"Please provide a valid movie name to search.")
        return

    # Regex ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∂‡¶¨‡ßç‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡¶æ‡¶ï‡¶æ‡¶õ‡¶ø ‡¶Æ‡¶ø‡¶≤ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶¨‡ßá
    # ‡¶Ø‡ßá‡¶Æ‡¶®: 'sarza meen' ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶≤‡ßá 'sarzameen' ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶¨‡ßá
    # ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∂‡¶¨‡ßç‡¶¶‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ß‡ßÄ‡¶®‡¶≠‡¶æ‡¶¨‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶á ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
    # \b ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶Ø‡ßá ‡¶∂‡¶¨‡ßç‡¶¶‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶æ‡¶ô‡ßç‡¶ó ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç .* ‡¶∂‡¶¨‡ßç‡¶¶‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö ‡¶ï‡¶∞‡ßá‡•§
    search_pattern = r'\b' + r'\b.*\b'.join(re.escape(word) for word in cleaned_query_parts) + r'\b'
    search_regex = re.compile(search_pattern, re.IGNORECASE)

    LOGGER.info(f"Searching for cleaned query: '{' '.join(cleaned_query_parts)}' with Regex pattern: '{search_pattern}'")

    try:
        # ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá title_lower ‡¶´‡¶ø‡¶≤‡ßç‡¶°‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø Regex ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        results_cursor = movie_info_db.find({'title_lower': search_regex}).limit(10)
        results = await results_cursor.to_list(length=None)
        
        LOGGER.info(f"Regex search for '{query}' found {len(results)} results.")

    except Exception as e:
        LOGGER.error(f"Database find error for query '{query}': {e}")
        await message.reply_text("‚ö†Ô∏è Bot is facing a database issue. Please report to the admin.")
        return

    if not results:
        if message.chat.type == ChatType.PRIVATE:
            await message.reply_text(f"‚ùå **Movie Not Found!**\n\nCould not find any movie matching '*{query}*'. Please check the spelling.")
        else:
            # ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶®‡¶ü ‡¶´‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶®‡¶æ ‡¶¶‡¶ø‡ßü‡ßá silence ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶¨‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
            pass # ‡¶Ö‡¶•‡¶¨‡¶æ await message.reply_text("‚ùå No movie found.", quote=True)
        return
    
    # ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡ßç‡¶∞‡¶¶‡¶∞‡ßç‡¶∂‡¶®
    if len(results) == 1:
        await show_quality_options(message, results[0]['_id'])
    else:
        buttons = [
            [InlineKeyboardButton(f"üé¨ {movie['title']} ({movie['year']})", callback_data=f"showqual_{movie['_id']}")]
            for movie in results
        ]
        await message.reply_text("ü§î Did you mean one of these?", reply_markup=InlineKeyboardMarkup(buttons), quote=True)


# ========= ‚ñ∂Ô∏è ‡¶¨‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ========= #
def run_web_server():
    web_app.run(host='0.0.0.0', port=PORT)

if __name__ == "__main__":
    LOGGER.info("Starting web server...")
    web_thread = Thread(target=run_web_server)
    web_thread.start()
    LOGGER.info("The Don is waking up... (Reliable Regex Search Mode)")
    app.run()
    LOGGER.info("The Don is resting...")
